백틱(`)은 엔터치고 줄바꿈 가능
** 거듭제곱
문자 사칙연산 숫자 -> +는 문자열로, 나머지 - * /는 문자가 Number()되어 계산됨
Nan == Nan ->false (Nan은 != 빼고는 모든 연산 다 false)
문자의 번호 .charCodeAt() ->쓸 일 없는데 사전 순 정렬할 때 같은 때
!! boolean으로 형변환
자료형까지 비교 ===  !==
''(빈문자열), 0, Nan, undefined, null, document.all ->false. 나머지 다 true
null 의도적으로 빈값을 넣을 때 많이 씀
유명한 버그 typeof null ->object  ⇒	null확인 위해서는 ===null 사용해야
변수 선언만 하고 값 대입안하면 undefined ->기본값이 undefined
if(first){
  if(second){
  }Else{
  }
}Else{
}
⇒
if(first && second){
}else if(first){
}else{
}


switch(A){
  case A:

  case B:

  default: //아무것도 안 걸릴 때. if문 Else의 역할. 맨 앞에 있어도 됨
} //A와 A가 같으면 실행. 근데 B까지 실행됨(이걸 이용하기도 함). break해줘야.  

삼항연산자는 return값이 있음. 그래서 변수로 받을 수. 근데 if문 같은 건X. 전부는 아니지만 대체로 식은 return이 있고, 문(if,switch,while)은 없
continue를 실행하면 그 뒤는 모두 무시됩니다.

for(a;b;c)에서 a,b,c 모두 생략 가능

const 배열, 객체 -> 배열, 객체 자체 바꿀 수 없지만 내부는 수정 가능
배열, 함수가 객체인 이유 -> 속성 추가 가능

배열
[front]
앞에 값 추가 unshift ->return값 배열길이
앞값 제거 shift ->return값 제거된 앞값
[back]
뒤에 값 추가 push ->return값 배열길이
뒷값 제거 pop 길이도 줆 -> return값 제거된 뒷값
->제거되었으면 제거된 값 리턴, 넣어줬으면 배열의 길이 return
중간 제거 splice(위치, 몇개) 위치만 넣으면 해당 인덱스부터 끝까지 모든 요소 제거
중간 제거 후 새로운 값 splice(위치, 몇개, 넣고 싶은~~)
그냥 중간값 추가만 splice(위치, 0, 넣고 싶은~~)
인덱스0으로 새로운 값 추가하고 싶다면 unshift. 그냥 넣으면 그냥 값수정.
배열변수.unshift(); 하면 값 뒤로 밀리고 맨 앞에 들어감
배열에 요소 있는지 검색 includes() boolean값 반환 a.includes(1,2) 2번째 인덱스부터 1을 찾아라
몇 번째 인덱스 위치하는지 indexOf, lastIndexOf
'열'->반복할 때 많이  쓰임 배열,문자열
[배열을 문자열로]  join : 구분자 넣어 붙임
기본값이 join(',')  ex)[1,2,3,4]->"1,2,3,4"
join('') 콤마 안 붙어서 ex)[1,2,3,4]->"1234"
join('') 안에 들어가는 매개변수가 들어가서 합쳐짐 
[문자열을 배열로] split : 어떤 구분자 기준으로 나눌지
ex)'1234'.split() ->["1234"]
'1234'.split('') 빈문자열: 한글자씩 분리->["3","1","4","6"]
'3146'.split('1') 1을 기준으로 분리 ->["3","46"] 
-배열 반복문 인수 함수자리
배열 반복문 forEach((element, index)=>{})
배열 요소를 바꾸는 반복문 map((element, index)=>{}) 
단, 기존 배열은 수정X. 만들어서 다른 배열에 담아야.
ex)array.map((ele,i)=>{return ele*2;})
빈 배열 만들 때 유용한 fill
Array(n).fill() 길이 n인 각 요소 undefined인 배열 만들어짐
[활용] 1~9까지 배열 만들기
Array(9).fill(0).map((el,idx)=>{return idx+1;})
-splice:원본바뀜 vs slice(start포함, end미만):원본안바뀜
중간 제거 splice(위치, 몇개) 위치만 넣으면 해당 인덱스부터 끝까지 모든 요소 제거
중간 제거 후 새로운 값 splice(위치, 몇개, 넣고 싶은~~)
그냥 중간값 추가만 splice(위치, 0, 넣고 싶은~~)
-정렬 sort "원본 바꿈"
->원본 안 건드리는 방법 배열 복사 후 array.slice().sort((a,b)=>a-b);
문자열의 경우 return값 a.localeCompare(b)
-reduce((a,c)=>{return a+c }) -> reduce((누적값,현재값)=> 누적값+현재값, 초기값)  초기값 없으면 a가 초기값
reduce로 "[배열을 객체로]" 바꿀 수 있고, foreach나 map 등 배열메서드 구현 가능
['철수', '영희', '현영', '한솔'].reduce((a,c,i) => {a[i]=c; return a;}, {})
->{0:"철수", 1:"영희", 2:"현영", 3:"한솔"}
1차원 배열에서만 사용가능 배열.every, some(조건함수)
ex)배열.every((td)=>td.textContent) textContent가 모두 있어야 true
Q. 다음 배열에서 한 칸이라도 nul이 들어 있으면 true 반환, 아니면 false
const arr = [1, 'her', null, undefined, false];
arr.some(el=>el===null);
1차원 배열에서만 사용가능 filter(조건함수) 조건맞는것만 배열로 반환
-concat 합침 "원본안바뀜"
[1].concat(2)과 [1].concat([2])는 같음. 배열 하나는 풀어서 합침 
2차원배열, 객체는 안 풀어서 합침

//원본 바뀌는 : push, pop, unshift, shift, splice, sort
//안바뀌는 : concat, slice, filter, every, some, map, forEach, find, findIndex, includes

함수
함수 이름 : 화살표함수는 변수의 이름이 한가지 방법(함수 표현식)/ function은 원래 알던 그거(함수 선언문)랑, 변수(함수 표현식) ->this에서 왜 이렇게 선언방법이 다른지 알 수 있음
함수 선언시 parameter, 매개변수
함수 호출 시 argument, 인수
funtion함수는 arguments가 있는데 호출 시 넣은 인수값을 유사배열로 리턴
화살표함수 {return 붙어있으면 생략 ;까지 생략
addEvent~나 setTimeout에 인수로 함수()가 아닌 함수를 넣어야 됨. 함수()는 함수가 아닌 return값임


객체 리터럴
속성 문자열일 경우 그냥 쓰면 되지만, 숫자맨앞, 특수문자나 띄어쓰기 있는 경우 따옴표
속성 접근할 때 obj.속성1(일반) or obj['속성1'](특수)
-> ex) event.target['0']과 [0]은 같음. 숫자 0은 문자열 0으로 변환. 물론, 객체[변수], 객체['변수']는 다름
속성 수정, 추가 방법 같
속성 제거 앞에 delete


메서드 : 객체리터럴 속성값으로 함수를 넣었을 때 = 객체 안 함수


객체(배열,함수 포함)끼리 비교 -> 항상 false(∵각 새로운 객체 만들어 비교한 셈) ⇒ 변수에 저장후 비교해야 같은 객체를 비교한 것
일반값은 그냥 값이지만 객체는 변수에 저장해서 주소를 저장시킴
변수들 공통점 있을 때 객체 안에 변수. 변수 충돌 막아줌, 변수 번갈아
.찍어서 접근과 []접근 구분해야


<<끝말잇기>>
prompt() : 사용자가 텍스트 입력하고 값 받음. 문자열 반환. 숫자로 받으려면 parseInt해야
confirm() : 사용자로부터 예/아니오 받음
document.querySelectorAll -> 유사배열로 값 리턴
document.querySelector -> 여러개 일 때 맨 처음것만 
태그.addEventListener('이벤트이름', 리스너함수/콜백함수:어떤 동작한 뒤에 연이어 실행되는 함수);
input, select, textarea 같은 사용자 입력창은 안에 들어 있는 값 value
span, div, button 등 다른 일반 태그들은 textContent


문자열 추가시키는 법 1.textContent 2.innerHTML 3.append

indexOf->숫자 vs includes-> T/F
배열에서는 요소의 자료형까지 같아야 함
'2345'.indexOf(3) ->1
['2','3','4','5'].indexOf(5) -> -1 (X) includes(5) 또한 false
['2','3','4','5'].indexOf('5') (O)


스코프(범위) : 변수에 접근 가능한 범위
var 함수 스코프 - 함수 안에서 선언한 변수, 밖에서 접근X
let 블록{} 스코프 - 함수, for, while, if, switch
->var는 if 안 변수 접근 가능
클로저: 함수와 함수바깥변수와의 관계
클로저+var+비동기(ex.이벤트리스너,셋타임아웃) -> 클로저 문제 발생(lotto참고)

setTimeout -> 취소 clearTimeout. 단, 함수 실행 전에만 취소 가능. 실행된 함수 취소X
setInterval -> 취소 clearInterval(setInerval 반환값)

removeEventListener 안쓰는 것 권장
태그.addEventListener('click', fun(1));
태그.removeEventListener('click', fun(1)); ->안지워짐
∵fun(1)!=fun(1)이기 때문에. 함수는 객체. 객체끼리 비교는 항상 false. 변수에 넣어야

태그.className은 클래스 2개이상일 때 여러개 인식x. 그냥 하나의 문자열로.
태그.classList.contains('클래스') 해당 클래스 들어있는지에 따라 T/F
태그.classList.add('클래스')
태그.classList.replace('기존클래스', '수정클래스')
태그.classList.remove('클래스')

현재 시각 new Date()
원하는 시각 new Date(년,0부터 시작하는 월,일 );
2월 21일부터 3월 3일까지의 const diff = new Date(2021,2,3)-new Date(2021,1,21);
console.log(diff/1000/60/60/24);

textContent는 기존 것을 지우고 덮어씌움

구조분해 할당 but createElement 구조분해할당하면 안돌아감
객체 구조분해할당 - 객체의 속성명과 변수명 같을 때.
const {body} = document; 
배열 구조분해할당 - 자릿수 같아야. 필요없는 건 빈칸으로
const one=arr[0]; 이런 식을 const [one, two, , four, five] = arr;로

-이벤트버블링 -> 여러개 이벤트 달 걸 부모에 한 번만 달 수 있 removeEventListener 한번만 할 수 있
td 클릭하면 -> tr 클릭됨 -> table 클릭됨.
table에 addEventListener 달았으나 event.target(누가 될지x. 자식태그중하나)은 td
event.currentTarget(addEventListener 달은 애)이 table
상위 태그에 addEventListener, 하위 태그 클릭시 상위 태그의 이벤트 리스너 동작 => 이벤트 버블링
하위 태그에 addEventListener, 상위 태그 클릭시 하위 태그의 이벤트 리스너 동작 => 이벤트 캡쳐링
-이벤트 캡처링(부모->자식에게 이벤트전달) 
addEventListener 세 번째 인수 true로 줘야
ex)팝업닫기에 사용. 외에 사용x
기본값인 false는 이벤트버블링
-이벤트위임
td에 이벤트 리스너를 달지 않고 상위 태그인 table에 이벤트 리스너를 다는 게 '이벤트 위임(event delegation)'
이벤트 위임은 프로그래머가 의도적으로 하는 것이고, 버블링은 그냥 이벤트 자체의 특성입니다.

//tr은 rowIndex(몇 번째 줄인지) 속성 갖고 있
let rowIndex = target.parentNode.rowIndex;
//td는 cellIndex(몇 번째 칸인지) 속성 갖고 있
let cellIndex = target.cellIndex;

parentNode 부모태그<-> children(유사배열) 현재태그의 자식태그

[유사배열을 배열로] 바꾸는 법 : Array.from 메서드로 유사배열 감싸기
2차원 배열 1차원 배열로 만드는 법 : .flat()
3차원이면 두 번 flat().flat() 

//폼 안의 input, button 접근법
        //방법1. event.target에 id 연결되니 id로 속성처럼 접근
        //방법2. event.target[n] 배열로 접근 

참조 아님. 깊은복사 - 내부 객체마저 참조 끊어지게 할 때 "객체 있으면 깊은 복사해야. 없으면 얕은 복사하면됨"
방법1.  JSON.parse(JSON.stringify( - 성능 안 좋고 프로토타입은 X, Math, Date같은객체 복사X
제대로된방법. 남들이 만들어둔 lodash 같은 라이브러리, 코드 활용해야 
const monster1 = JSON.parse(JSON.stringify(monsterList[0]));
얕은 복사 :  원시값은 분리. 내부 객체는 참조 
바깥 객체만 복사 내부 객체는 참조 관계
문자열,숫자,boolean, null, undefined 원시값(객체 아닌 값) 애초에 참조가 없기 때문에 복사됨
나머지 객체는 참조가됨
const monster3 = {...monsterList[0]};
배열은 [...arr];
ex)const array = [{j: 'k'}, {l: 'm'}];
    const arrCopy = [...array];
    console.log(array === arrCopy); //false
    console.log(array[0] === arrCopy[0]); //true 
    여기서 깊은복사는 둘 다 false가 되고, 참조는 둘다 true가 된다. 
야매 배열얕복1)array의 slice메서드가 배열 얕은복사하는 방법
야매 배열얕복2)concat 배열에 다른값 합치는 메서드로
 원래 배열.concat(2,3); -> [배열 요소, 2, 3]
 배열.slice()처럼 배열.concat()해서 얕복 가능
참조 : 둘이 연결됨. 하나 바꾸면 둘 다 바뀜. 수정하면 영향가고 됨.
moster2 수정하면 monsterList[0] 바뀜 monsterList[0] 수정하면 moster2 바뀜
const monster2 = monsterList[0];
Q. 깊은복사해보기
const a = 'b';
const c = ['d', true, 1];
const e = {g: 'h'};
const i = [{j: 'k'}, {l: 'm')}];
const n = {o: {p: 'q'}};

const a1 = a; //원시값 다른 변수에 넣으면 복사됨
const c1= c;(X) 배열 바로 넣으면 참조됨.
           = c.slice(); (O) 얕은복사 아닌가? No!! 배열 안 원시값만 있음. 객체 있으면 깊은복사해야  
           = [...c](O)
const e1 = [...e](O) 내부에 객체 없음
const i1, n1 = JSON.parse(JSON.stringify(i or n));

객체를 대입하면 참조, 깊복, 얕복 중 선택. 
원시값 대입은 복사


객체 안 this는 객체 자기 자신 가리킴
단, 객체 다른 변수에 참조했을 때 참조한 this는 참조한 곳의 this아님. window됨.
화살표 함수 안 this는 window(브라우저 총괄 객체) window 생략해서 document, console.log 쓴 것


객체 찍어내고, 객체 서로 상호작용한다 -> 클래스로 -> 객체지향으로 나아감
new하면 객체를 return
클래스 위주 프로그래밍 -> 객체 지향 프로그래밍
함수 조합 프로그래밍(클래스 아예 사용않기도) -> 함수형 프로그래밍
클래스 배우기 전까지 한 프로그래밍 -> 절차형 프로그래밍

객체.메서드();의 this는 자기자신.
const a = {}
a.f(); //this 자기자신
const b = a.f;
b(); //this window(this는 기본적으로 window를 가리킴)
this는 호출하는 시점에 결정됨
function에서(화살표함수는 안됨) 함수에다 bind메서드로 this 직접 바꿀 수
ex)function a(){}
   a.bind(document)(); //this document


window 브라우저를 가리키는 객체
this 상황에 따라 다른 값. 기본적으로 window객체 가리킴
1. 객체 통해 this : 객체 가리킴
2. 콜백함수의 this를 바꾸는 특정 메서드 ex)addEventListener ->addEventListener 달은 애 가리킴
3. this 바뀌지 않길 원한다면 화살표 함수

클래스처럼 찍어내는 공장함수: 팩토리함수

코드 실행 순서
호출스택: 동기코드 담당. 모든 "함수"는 호출 스택에서만 실행됨. 아래서부터 쌓여 위부터 빠져나감
동기코드 실행 끝나고(호출스택 비워지고) 비동기코드 시작
비동기코드 담당
백그라운드 : 타이머, 이벤트리스너(호출스택 갔다옴) "저장"하는 공간. setTimeout, addEventListener 때 되면 "콜백함수 태스크 큐로" 보냄. 백그라운드는 순서개념x. 그냥 등록됐다 해제됨. 동시에 실행될 수
태스크 큐 : 실행돼야 할 "콜백 함수"들 줄 서서 "대기"하고 있는 공간
이벤트루프 :  호출스택 비어있을 때 태스크큐에서 하나씩 꺼내 실행해줌
setTimeout 시간되었다고 호출스택 올라가는 것이 아니라, 호출 스택이 비어있어야만 태스크 큐 함수가 호출스택으로 올라감