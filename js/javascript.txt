javascript란
- 객체 기반의 스크립트 프로그래밍 언어(linebyline으로 수행되는 인터프리터 형식. C,java와 다르게 별도의 컴파일)
- ECMAScript(웹브라우저 js표준화) 사양을 준수하는 범용 스크립트 언어

cpu, 주기억장치 메모리, 보조기억장치 hdd/ssd
만든 자바스크립트 disk에 파일형태로 저장 -> 컴파일, 인터프리터 등으로 수행(컴퓨터가 이해할 수 있는 언어로 변환) -> 로드되어 메모리에 적재 -> 연산은 cpu요청해 정보 cpu에 올리고 연산 결과 메모리에 저장
레퍼런스, 주소, 변수 할당 메모리 위에서 동작

_참고 var의 hosting->var 안 쓰는 이유
호이스팅: 코드에 선언된 변수, 함수 유효한 범위의 코드 상단으로 끌어 올리는 작업
var로 변수, 함수 선언한 것 위로 올려짐. 할당은 올려지지 않고.
let/const는 hosting 발생하지X

자바스크립트 자료형 : 원시타입(boolean, null-값 비어있(nothing, empty, unknown), undefined-값 할당되어 있는지, number, string, symbol), 객체타입 obj
- null은 typeof가 object. 버그지만 고치지x
- number는 Infinity, -Infinity, NaN(Not a Number) 같은 특수 숫자 포함. 2^53-1보다 큰 정수 다루려면 bigint자료형 써야
변수 메모리 공간 한계로 소수 연산 계산 오차. Math통해 해결 가능

객체
- 메모리 공간에 객체 주소값이 저장. reference(참조) 통해 객체 데이터 접근
- 객체에 개체(entity)=속성 추가 obj.key = value로 하면 됨. 수정과 같.
- 삭제는 delete obj.key;
- 객체 복사 대상 전체 아닌 주소값만 복사되는 문제. => 전체복사: 얕은복사, 깊은복사
- 얕은복사 방법1 : 반복문 for문을 통해 일일이 한땀한땀
- 얕은복사 방법2 : Object.assing({}, 희망객체) 함수 통해 새로운 객체 만들어
- 얕은복사 방법3 : ES6부터 지원하는 전개연산자{... } 이용해
- 얕은복사 문제점 : 객체 내 또 다른 객체가 있다면 복사되지X => 깊은복사
- 깊은복사 방법1 : 재귀함수 이용
- 깊은복사 방법2 : JSON객체 이용. JSON.parse(JSON.stringify(희망객체)); 
                   stringify가 객체를 문자열로 변환하는데 이떄 원본 객체와 참조가 끊김
